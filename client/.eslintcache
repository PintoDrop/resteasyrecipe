[{"D:\\resteasyrecipe\\client\\src\\index.js":"1","D:\\resteasyrecipe\\client\\src\\App.js":"2","D:\\resteasyrecipe\\client\\src\\pages\\Register\\index.js":"3","D:\\resteasyrecipe\\client\\src\\pages\\Home\\index.js":"4","D:\\resteasyrecipe\\client\\src\\pages\\Create\\index.js":"5","D:\\resteasyrecipe\\client\\src\\pages\\Favorites\\index.js":"6","D:\\resteasyrecipe\\client\\src\\pages\\Login\\index.js":"7","D:\\resteasyrecipe\\client\\src\\pages\\Recipes\\index.js":"8","D:\\resteasyrecipe\\client\\src\\pages\\Random\\index.js":"9","D:\\resteasyrecipe\\client\\src\\pages\\SearchBanner\\index.js":"10","D:\\resteasyrecipe\\client\\src\\pages\\Register\\Register.js":"11","D:\\resteasyrecipe\\client\\src\\pages\\Home\\Home.js":"12","D:\\resteasyrecipe\\client\\src\\pages\\Create\\CreateRecipe.js":"13","D:\\resteasyrecipe\\client\\src\\pages\\Favorites\\Favorites.js":"14","D:\\resteasyrecipe\\client\\src\\pages\\Login\\Login.js":"15","D:\\resteasyrecipe\\client\\src\\pages\\Recipes\\Recipes.js":"16","D:\\resteasyrecipe\\client\\src\\pages\\SearchBanner\\SearchBanner.js":"17","D:\\resteasyrecipe\\client\\src\\pages\\Random\\Random.js":"18","D:\\resteasyrecipe\\client\\src\\utils\\auth.js":"19","D:\\resteasyrecipe\\client\\src\\utils\\mutations.js":"20","D:\\resteasyrecipe\\client\\src\\utils\\queries.js":"21"},{"size":345,"mtime":1682965654894,"results":"22","hashOfConfig":"23"},{"size":2066,"mtime":1683234751926,"results":"24","hashOfConfig":"23"},{"size":41,"mtime":1682714129007,"results":"25","hashOfConfig":"23"},{"size":43,"mtime":1683047707087,"results":"26","hashOfConfig":"23"},{"size":45,"mtime":1683126774105,"results":"27","hashOfConfig":"23"},{"size":42,"mtime":1682965654894,"results":"28","hashOfConfig":"23"},{"size":38,"mtime":1682714129007,"results":"29","hashOfConfig":"23"},{"size":38,"mtime":1683126774106,"results":"30","hashOfConfig":"23"},{"size":35,"mtime":1683126774106,"results":"31","hashOfConfig":"23"},{"size":42,"mtime":1683126774107,"results":"32","hashOfConfig":"23"},{"size":3903,"mtime":1683209625967,"results":"33","hashOfConfig":"23"},{"size":8134,"mtime":1683209625965,"results":"34","hashOfConfig":"23"},{"size":7723,"mtime":1683236050003,"results":"35","hashOfConfig":"23"},{"size":5581,"mtime":1683149805405,"results":"36","hashOfConfig":"23"},{"size":3652,"mtime":1683209625966,"results":"37","hashOfConfig":"23"},{"size":10732,"mtime":1683256080820,"results":"38","hashOfConfig":"23"},{"size":1462,"mtime":1683225493758,"results":"39","hashOfConfig":"23"},{"size":1892,"mtime":1683248532114,"results":"40","hashOfConfig":"23"},{"size":496,"mtime":1682714129007,"results":"41","hashOfConfig":"23"},{"size":1493,"mtime":1683234920951,"results":"42","hashOfConfig":"23"},{"size":343,"mtime":1683248464522,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xu1qun",{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\resteasyrecipe\\client\\src\\index.js",[],"D:\\resteasyrecipe\\client\\src\\App.js",["93","94","95","96"],"import React, { useState } from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\n\nimport Register from \"./pages/Register\";\nimport CreateRecipe from \"./pages/Create\";\n\n// import Register from \"./pages/Register\";\nimport Recipes from \"./pages/Recipes\";\nimport Favorites from \"./pages/Favorites\";\nimport Random from \"./pages/Random\";\n\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport SearchBar from \"./pages/SearchBanner\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"auth_token\");\n  return {\n    headers: {\n      ...headers,\n      Authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  const [pageState, setPageState] = useState({\n    recipes: true,\n    random: false,\n    login: false,\n    create: false,\n    favorites: false,\n    search: true,\n  });\n\n  return (\n    <>\n      <ApolloProvider client={client}>\n        {/* <Router>\n          <div>\n            <Routes>\n              <Route path=\"/\" element={<Home />} />\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/register\" element={<Register />} />\n            </Routes>\n          </div>\n        </Router> */}\n        <Home pageState={pageState} setPageState={setPageState} />\n        {pageState.search ? <SearchBar /> : \"\"}\n        {pageState.recipes ? <Recipes /> : \"\"}\n        {pageState.random ? <Random /> : \"\"}\n        {pageState.login ? <Login /> : \"\"}\n        {pageState.create ? <CreateRecipe /> : \"\"}\n        {pageState.favorites ? <Favorites /> : \"\"}\n        \n        \n\n    </ApolloProvider>\n    \n    <CssBaseline />\n\n\n    </>\n  );\n}\n\nexport default App;\n","D:\\resteasyrecipe\\client\\src\\pages\\Register\\index.js",[],"D:\\resteasyrecipe\\client\\src\\pages\\Home\\index.js",[],"D:\\resteasyrecipe\\client\\src\\pages\\Create\\index.js",[],"D:\\resteasyrecipe\\client\\src\\pages\\Favorites\\index.js",[],"D:\\resteasyrecipe\\client\\src\\pages\\Login\\index.js",[],"D:\\resteasyrecipe\\client\\src\\pages\\Recipes\\index.js",[],"D:\\resteasyrecipe\\client\\src\\pages\\Random\\index.js",[],"D:\\resteasyrecipe\\client\\src\\pages\\SearchBanner\\index.js",[],"D:\\resteasyrecipe\\client\\src\\pages\\Register\\Register.js",["97"],"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { REGISTER_USER } from \"../../utils/mutations\";\nimport Grid from \"@mui/material/Grid\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Button from \"@mui/material/Button\";\nimport Stack from \"@mui/material/Stack\";\nimport TextField from \"@mui/material/TextField\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport Alert from \"@mui/material/Alert\";\n\nimport Auth from \"../../utils/auth.js\";\n\nfunction Register() {\n  const [formState, setFormState] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const [open, setOpen] = useState(true);\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [register, { error, data }] = useMutation(REGISTER_USER);\n\n   useEffect(() => {\n     if (error) {\n       setShowAlert(true);\n     } else {\n       setShowAlert(false);\n     }\n   }, [error]);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await register({\n        variables: { ...formState },\n      });\n\n      console.log(data);\n      Auth.login(data.register.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setFormState({\n      name: '',\n      email: '',\n      password: '',\n    });\n\n  };\n  return (\n    <>\n      <Grid container justifyContent=\"center\">\n        <Grid container justifyContent=\"center\">\n          <h1>Register Here</h1>\n        </Grid>\n        <Grid item justifyContent=\"center\" xs={10} md={6} lg={4}>\n          <form noValidate validated={validated} onSubmit={handleFormSubmit}>\n            <Stack sx={{ width: \"100%\" }} spacing={2}>\n              <Snackbar\n                open={showAlert}\n                sx={{ height: \"100%\" }}\n                anchorOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"center\",\n                }}\n              >\n                <Alert\n                  dismissible\n                  severity=\"error\"\n                  onClose={() => setShowAlert(false)}\n                >\n                  Something went wrong. Check your inputs!\n                </Alert>\n              </Snackbar>\n            </Stack>\n            <InputLabel>Name</InputLabel>\n            <TextField\n              type=\"text\"\n              name=\"name\"\n              value={formState.name}\n              fullWidth\n              onChange={handleInputChange}\n              required\n            />\n            <InputLabel>Email</InputLabel>\n            <TextField\n              type=\"email\"\n              name=\"email\"\n              value={formState.email}\n              fullWidth\n              onChange={handleInputChange}\n              required\n            />\n            <InputLabel>Password</InputLabel>\n            <TextField\n              type=\"password\"\n              name=\"password\"\n              value={formState.password}\n              fullWidth\n              onChange={handleInputChange}\n              required\n            />\n            {/* <button type=\"submit\">Register User</button> */}\n\n            <Stack\n              justifyContent=\"center\"\n              direction=\"row\"\n              spacing={2}\n              padding={2}\n            >\n              <Button\n                variant=\"contained\"\n                color=\"success\"\n                type=\"submit\"\n                onClick={handleClick}\n              >\n                Register User\n              </Button>\n            </Stack>\n          </form>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default Register;\n","D:\\resteasyrecipe\\client\\src\\pages\\Home\\Home.js",[],"D:\\resteasyrecipe\\client\\src\\pages\\Create\\CreateRecipe.js",[],"D:\\resteasyrecipe\\client\\src\\pages\\Favorites\\Favorites.js",[],"D:\\resteasyrecipe\\client\\src\\pages\\Login\\Login.js",["98"],"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../../utils/mutations\";\nimport Register from \"../Register/Register\"\nimport Grid from '@mui/material/Grid';\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Button from \"@mui/material/Button\";\nimport Stack from \"@mui/material/Stack\";\nimport TextField from \"@mui/material/TextField\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport Alert from \"@mui/material/Alert\";\n\n\n\nimport Auth from \"../../utils/auth.js\";\n\nfunction Login() {\n  const [open, setOpen] = useState(true);\n  \n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const [formState, setFormState] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  \n  \n  const [Login, { error, data }] = useMutation(LOGIN_USER);\n  \n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n      if (form.checkValidity() === false) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n    try {\n      const { data } = await Login({\n        variables: { ...formState },\n      });\n\n      console.log(data);\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setFormState({\n      email: '',\n      password: '',\n    });\n\n  };\n  return (\n    <>\n      <Grid container justifyContent=\"center\">\n        <Grid container justifyContent=\"center\">\n          <h1>Login Here</h1>\n        </Grid>\n        <Grid item justifyContent=\"center\" xs={10} md={6} lg={4}>\n          <form noValidate validated={validated} onSubmit={handleFormSubmit}>\n            <Stack sx={{ width: \"100%\" }} spacing={2}>\n              <Snackbar\n                open={showAlert}\n                sx={{ height: \"100%\" }}\n                anchorOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"center\",\n                }}\n              >\n                <Alert\n                  dismissible\n                  severity=\"error\"\n                  onClose={() => setShowAlert(false)}\n                >\n                  Please check your login inputs!\n                </Alert>\n              </Snackbar>\n            </Stack>\n            <InputLabel>Email</InputLabel>\n            <TextField\n              type=\"email\"\n              name=\"email\"\n              value={formState.email}\n              fullWidth\n              onChange={handleInputChange}\n              required\n            />\n            <InputLabel>Password</InputLabel>\n            <TextField\n              type=\"password\"\n              name=\"password\"\n              value={formState.password}\n              fullWidth\n              onChange={handleInputChange}\n              required\n            />\n            {/* <button type=\"submit\">Login User</button> */}\n            <Stack\n              justifyContent=\"center\"\n              direction=\"row\"\n              spacing={2}\n              padding={2}\n            >\n              <Button\n                variant=\"contained\"\n                color=\"success\"\n                type=\"submit\"\n                onClick={handleClick}\n              >\n                Login User\n              </Button>\n            </Stack>\n          </form>\n        </Grid>\n\n        <Register />\n      </Grid>\n    </>\n  );\n}\n\nexport default Login;\n","D:\\resteasyrecipe\\client\\src\\pages\\Recipes\\Recipes.js",["99"],"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Card from \"@mui/material/Card\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardActions from \"@mui/material/CardActions\";\nimport Collapse from \"@mui/material/Collapse\";\nimport Avatar from \"@mui/material/Avatar\";\nimport IconButton, { IconButtonProps } from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport { red } from \"@mui/material/colors\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport StarsRating from \"stars-rating\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_RECIPES } from \"../../utils/queries\";\ninterface ExpandMoreProps extends IconButtonProps {\n  expand: boolean;\n}\n\nconst ExpandMore = styled((props: ExpandMoreProps) => {\n  const { expand, ...other } = props;\n  return <IconButton {...other} />;\n})(({ theme, expand }) => ({\n  transform: !expand ? \"rotate(0deg)\" : \"rotate(180deg)\",\n  marginLeft: \"auto\",\n  transition: theme.transitions.create(\"transform\", {\n    duration: theme.transitions.duration.shortest,\n  }),\n}));\n\n// export default\nfunction Recipes() {\n  const [expanded, setExpanded] = React.useState(false);\n  \n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n  \n  const { loading, data } = useQuery(QUERY_RECIPES);\n  const recipes = data?.recipes || [];\n  \n  \n  \n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <>\n      <Typography variant=\"h3\" align=\"center\">\n        {\" \"}\n        All Recipes\n      </Typography>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          width: \"100%\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        {recipes.map((recipe) => (\n          <Card\n            sx={{\n              maxWidth: 345,\n              marginRight: 10,\n              marginLeft: 10,\n              marginBottom: \"20px\",\n            }}\n            key={recipe.name}\n          >\n            <CardHeader\n              avatar={\n                <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\">\n                  {/* user avatar goes here */}\n                </Avatar>\n              }\n              title={recipe.name}\n            />\n            <CardMedia\n              component=\"img\"\n              height=\"194\"\n              image={recipe.image}\n              title={recipe.name}\n            />\n            <CardContent>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                <h2>Description: </h2>\n                <p>{recipe.description}</p>\n\n                <StarsRating\n                  count={5}\n                  value={recipes.rate}\n                  //onChange={ratingChange}\n                  size={24}\n                  color2={\"#ffd700\"}\n                />\n              </Typography>\n            </CardContent>\n\n            <CardActions disableSpacing>\n              <IconButton aria-label=\"add to favorites\">\n                <FavoriteIcon />\n              </IconButton>\n\n              <ExpandMore\n                expand={expanded}\n                onClick={handleExpandClick}\n                aria-expanded={expanded}\n                aria-label=\"show more\"\n              >\n                <ExpandMoreIcon />\n              </ExpandMore>\n            </CardActions>\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n              <CardContent>\n                <Typography paragraph>\n                  <h3>Directions: </h3>\n                  {recipe.instructions}\n                </Typography>\n                <Typography paragraph>\n                  <h3>Ingredients: </h3>\n                  {recipe.ingredients}\n                </Typography>\n                <Typography paragraph>\n                  <h3>Cook time: </h3>\n                  {recipe.cookTime}\n                  <p> minutes</p>\n                </Typography>\n                <Typography>\n                  <h3>Region: </h3>\n                  {recipe.region}\n                </Typography>\n              </CardContent>\n            </Collapse>\n          </Card>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default Recipes;\n\n// import * as React from 'react';\n// import { useState } from \"react\";\n// import { styled } from '@mui/material/styles';\n// import Card from '@mui/material/Card';\n// import CardHeader from '@mui/material/CardHeader';\n// import CardMedia from '@mui/material/CardMedia';\n// import CardContent from '@mui/material/CardContent';\n// import CardActions from '@mui/material/CardActions';\n// import Collapse from '@mui/material/Collapse';\n// import Avatar from '@mui/material/Avatar';\n// import IconButton, { IconButtonProps } from '@mui/material/IconButton';\n// import Typography from '@mui/material/Typography';\n// import { red } from '@mui/material/colors';\n// import FavoriteIcon from '@mui/icons-material/Favorite';\n// // import ShareIcon from '@mui/icons-material/Share';\n// import ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n// // import MoreVertIcon from '@mui/icons-material/MoreVert';\n// import StarsRating from \"stars-rating\";\n\n\n// interface ExpandMoreProps extends IconButtonProps {\n//   expand: boolean;\n// }\n\n// const ExpandMore = styled((props: ExpandMoreProps) => {\n//   const { expand, ...other } = props;\n//   return <IconButton {...other} />;\n// })(({ theme, expand }) => ({\n//   transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n//   marginLeft: 'auto',\n//   transition: theme.transitions.create('transform', {\n//     duration: theme.transitions.duration.shortest,\n//   }),\n// }));\n\n\n// // export default \n// function Recipes(data) {\n//   const [expanded, setExpanded] = React.useState(false);\n//   const [rating, setRating] = useState(0);\n  \n\n//   // get rating by name of recipe\n//   const ratingChange = (newRating) => {\n//     setRating(newRating);\n//   };\n\n//   const handleExpandClick = () => {\n//     setExpanded(!expanded);\n//   };\n  \n//   // need api call to bring in seeded data (instead of const recipes), will need object ID to grab\n//   const [recipes] = useState([\n//     {\n//       name: \"Chicken Tacos\",\n//       ingredients: \"1/2 pound chicken, four bell peppers \",\n//       instructions: \"Cook chicken and heat tortillas\",\n//       region: \"Meixcan\",\n//       cookTime: \"30 minutes\",\n//       description: \"Tacos made with pollo for a zesty punch\",\n\n//       image: require(\"../../Images/chickenTacos.jpg\").default,\n//       rate: 4,\n//     },\n//     {\n//       name: \"Apple Walnut Salad\",\n//       ingredients:\n//         \"Arugula, Belgian Endive, Apples, Dried Cranberries, Blue Cheese, Nuts, Maple Cinnamon Dressing  \",\n//       instructions:\n//         \"1. Toast and chop the walnuts. 2.Whisk the dressing ingredients together. Stir in the apples. 3. Place the arugula and endive in a bowl. 4. Add part of the cranberries, cheese, and walnuts. 5. Transfer the apples to the bowl with the greens. Toss to coat. Continue to add the dressing until the salad is moist. 6.Finish with the remaining toppings and toss. ENJOY!\",\n//       region: \"American\",\n//       cookTime: \"28 minutes\",\n//       description: \"Crisp salad\",\n\n//       image: require(\"../../Images/appleWalnutSal.jpg\").default,\n//       rate: 3,\n//     },\n//   ]);\n\n    \n//     return (\n//       <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n//         {recipes.map((recipe) => (\n//           // need to grab recipe by id after data has been seeded so rating changes by id\n//           <Card sx={{ maxWidth: 345 }} key={recipe.name}>\n//             <CardHeader\n//               avatar={\n//                 <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\">\n//                 </Avatar>\n//               }\n//               // action={\n//               //   <IconButton aria-label=\"settings\">\n//               //     <MoreVertIcon />\n//               //   </IconButton>\n//               // }\n//               title={recipe.name}\n//             />\n//             <CardMedia\n//               component=\"img\"\n//               height=\"194\"\n//               // needs to be src not image?\n//               image={recipe.image}\n//               // alt=\"Paella dish\"\n//             />\n//             <CardContent>\n//               <Typography variant=\"body2\" color=\"text.secondary\">\n//                 <h2>Description: </h2>\n//                 <p>{recipe.description}</p>\n\n//                 {/* <h2>Directions: </h2>\n//                 <p>{recipe.instructions}</p>\n\n//                 <h2>Ingredients: </h2>\n//                 <p>{recipe.ingredients}</p>\n\n//                 <h3>Cook time: </h3>\n//                 <p>{recipe.cookTime}</p>\n\n//                 <h3>Region: </h3>\n//                 <p>{recipe.region}</p> */\n//                 <StarsRating\n//                   count={5}\n//                   value={recipe.rate}\n//                   onChange={ratingChange}\n//                   size={24}\n//                   color2={\"#ffd700\"}\n//                 />\n//               </Typography>\n//             </CardContent>\n\n//             <CardActions disableSpacing>\n//               <IconButton aria-label=\"add to favorites\">\n//                 <FavoriteIcon />\n//               </IconButton>\n//               {/* <IconButton aria-label=\"share\">\n//                 <ShareIcon />\n//               </IconButton> */}\n//               <ExpandMore\n//                 expand={expanded}\n//                 onClick={handleExpandClick}\n//                 aria-expanded={expanded}\n//                 aria-label=\"show more\"\n//               >\n//                 <ExpandMoreIcon />\n//               </ExpandMore>\n//             </CardActions>\n//             <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n//               <CardContent>\n//                 {/* <Typography paragraph>Method:</Typography> */}\n//                 <Typography paragraph>\n//                   <h3>Directions: </h3>\n//                   {recipe.instructions}\n//                 </Typography>\n//                 <Typography paragraph>\n//                   <h3>Ingredients: </h3>\n//                   {recipe.ingredients}\n//                 </Typography>\n//                 <Typography paragraph>\n//                   <h3>Cook time: </h3>\n//                   {recipe.cookTime}\n//                 </Typography>\n//                 <Typography>\n//                   <h3>Region: </h3>\n//                   {recipe.region}\n//                 </Typography>\n//               </CardContent>\n//             </Collapse>\n//           </Card>\n//         ))}\n//       </div>\n//     );\n// }\n\n\n// export default Recipes;\n\n\n","D:\\resteasyrecipe\\client\\src\\pages\\SearchBanner\\SearchBanner.js",["100","101","102"],"import * as React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport HomePhoto from \"../../Images/foodBanner.png\";\nimport TextField from \"@mui/material/TextField\";\nimport { useState } from \"react\";\nimport Button from \"@mui/material/Button\";\n\n\nfunction SearchBar() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const onSearch = (searchItem) => {\n    console.log(\"search\", searchItem);\n  };\n  return (\n    <>\n      <Grid\n        sx={{\n          backgroundImage: `url(${HomePhoto})`,\n          backgroundPosition: \"center\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundSize: \"cover\",\n          height: 500,\n          width: \"100%\",\n        }}\n      >\n        <Grid container justifyContent={\"center\"} padding={20}>\n          <TextField\n            sx={{ backgroundColor: \"whitesmoke\", width: 600 }}\n            id=\"search\"\n            type=\"search\"\n            value={searchTerm}\n            label=\"Search\"\n            onChange={handleChange}\n            margin=\"dense\"\n          />\n          <Grid padding={2}>\n            <Button variant=\"contained\" onClick={() => onSearch(searchTerm)}>\n              Search\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default SearchBar;\n","D:\\resteasyrecipe\\client\\src\\pages\\Random\\Random.js",["103","104"],"import React from \"react\";\nimport Recipes from \"../Recipes\";\nimport Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\nimport { useState } from \"react\";\n\n// function Random() {\n\n//   // replace with data from API\n//   const recipes = [\"chicken tacos\"];\n//   const [randoRecipe, setRandoRecipe] = useState();\n\nfunction RandomRecipePicker() {\n  const [recipes, setRecipes] = useState([]);\n  const [selectedCookingStyle, setSelectedCookingStyle] = useState(\"\");\n  const [randomRecipe, setRandomRecipe] = useState(null);\n\n  // filter recipe\n  const handlePickRandomRecipe = () => {\n    // filtering the recipe to only \"style/region\" that we picked\n    const filteredRecipes = recipes.filter(\n      (recipe) => recipe.cookingStyle === selectedCookingStyle\n    );\n    // picking the random recipe\n    const randomIndex = Math.floor(Math.random() * filteredRecipes.length);\n    const randomRecipe = filteredRecipes[randomIndex];\n    // setting the recipe\n    setRandomRecipe(randomRecipe);\n  };\n\n  /*   const handleClick = () => {\n      var randomIndex = Math.floor(Math.random() * recipes.length);\n      setRandoRecipe(recipes[randomIndex]);\n    \n  }; */\n  //   const randoIndex = Math.floor(math.random() * recipe.length);\n\n  return (\n    <div>\n      <Grid container justifyContent=\"center\">\n        <h1>Random Recipe</h1>\n      </Grid>\n      <Grid container justifyContent=\"center\">\n        <Button\n          variant=\"contained\"\n          color=\"success\"\n          onClick={handlePickRandomRecipe}\n        >\n          Find Random Recipe\n        </Button>\n      </Grid>\n      {/* </Grid> */}\n      {/* data rendered needs to go on a card once api is data is functional. Conditional render (if data) */}\n      <Recipes data={randomRecipe} />\n    </div>\n    // </>\n  );\n}\n\nexport default RandomRecipePicker;\n\n//     data\n//\n//\n//\n//\n//\n// render(Recipe)\n//\n//\n//\n//\n//\n//\n//\n","D:\\resteasyrecipe\\client\\src\\utils\\auth.js",["105"],"import decode from \"jwt-decode\";\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return token ? true : false;\n  }\n\n  getToken() {\n    return localStorage.getItem(\"auth_token\");\n  }\n\n  login(token) {\n    localStorage.setItem(\"auth_token\", token);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    localStorage.removeItem(\"auth_token\");\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();\n","D:\\resteasyrecipe\\client\\src\\utils\\mutations.js",[],"D:\\resteasyrecipe\\client\\src\\utils\\queries.js",[],{"ruleId":"106","severity":1,"message":"107","line":9,"column":27,"nodeType":"108","messageId":"109","endLine":9,"endColumn":33},{"ruleId":"106","severity":1,"message":"110","line":9,"column":35,"nodeType":"108","messageId":"109","endLine":9,"endColumn":40},{"ruleId":"106","severity":1,"message":"111","line":9,"column":42,"nodeType":"108","messageId":"109","endLine":9,"endColumn":48},{"ruleId":"106","severity":1,"message":"112","line":14,"column":8,"nodeType":"108","messageId":"109","endLine":14,"endColumn":16},{"ruleId":"106","severity":1,"message":"113","line":30,"column":29,"nodeType":"108","messageId":"109","endLine":30,"endColumn":33},{"ruleId":"106","severity":1,"message":"113","line":33,"column":26,"nodeType":"108","messageId":"109","endLine":33,"endColumn":30},{"ruleId":"106","severity":1,"message":"114","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":18},{"ruleId":"106","severity":1,"message":"115","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":16},{"ruleId":"106","severity":1,"message":"116","line":3,"column":8,"nodeType":"108","messageId":"109","endLine":3,"endColumn":11},{"ruleId":"106","severity":1,"message":"117","line":4,"column":8,"nodeType":"108","messageId":"109","endLine":4,"endColumn":13},{"ruleId":"106","severity":1,"message":"118","line":14,"column":19,"nodeType":"108","messageId":"109","endLine":14,"endColumn":29},{"ruleId":"106","severity":1,"message":"119","line":15,"column":32,"nodeType":"108","messageId":"109","endLine":15,"endColumn":55},{"ruleId":"120","severity":1,"message":"121","line":28,"column":1,"nodeType":"122","endLine":28,"endColumn":34},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Routes' is defined but never used.","'Register' is defined but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'styled' is defined but never used.","'Box' is defined but never used.","'Paper' is defined but never used.","'setRecipes' is assigned a value but never used.","'setSelectedCookingStyle' is assigned a value but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration"]