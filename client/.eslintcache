[{"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/index.js":"1","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/App.js":"2","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Recipes/index.js":"3","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Login/index.js":"4","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Home/index.js":"5","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Favorites/index.js":"6","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Register/index.js":"7","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Random/index.js":"8","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/SearchBanner/index.js":"9","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Create/index.js":"10","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Login/Login.js":"11","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Recipes/Recipes.js":"12","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Favorites/Favorites.js":"13","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Register/Register.js":"14","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Home/Home.js":"15","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Create/CreateRecipe.js":"16","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Random/Random.js":"17","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/SearchBanner/SearchBanner.js":"18","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/My Recipes/MyRecipes.js":"19","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/utils/auth.js":"20","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/utils/queries.js":"21","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/utils/mutations.js":"22","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/RecipeCard/index.js":"23","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/RecipeCard/RecipeCard.js":"24","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/My Recipes/index.js":"25"},{"size":345,"mtime":1683308210747,"results":"26","hashOfConfig":"27"},{"size":2163,"mtime":1683404255406,"results":"28","hashOfConfig":"27"},{"size":38,"mtime":1683308210751,"results":"29","hashOfConfig":"27"},{"size":38,"mtime":1683308210750,"results":"30","hashOfConfig":"27"},{"size":43,"mtime":1683308210749,"results":"31","hashOfConfig":"27"},{"size":42,"mtime":1683308210749,"results":"32","hashOfConfig":"27"},{"size":41,"mtime":1683308210751,"results":"33","hashOfConfig":"27"},{"size":35,"mtime":1683308210750,"results":"34","hashOfConfig":"27"},{"size":42,"mtime":1683308210752,"results":"35","hashOfConfig":"27"},{"size":45,"mtime":1683308210748,"results":"36","hashOfConfig":"27"},{"size":3654,"mtime":1683317541203,"results":"37","hashOfConfig":"27"},{"size":858,"mtime":1683424164646,"results":"38","hashOfConfig":"27"},{"size":5585,"mtime":1683317541202,"results":"39","hashOfConfig":"27"},{"size":3903,"mtime":1683308210751,"results":"40","hashOfConfig":"27"},{"size":13726,"mtime":1683401186676,"results":"41","hashOfConfig":"27"},{"size":4238,"mtime":1683406005581,"results":"42","hashOfConfig":"27"},{"size":3077,"mtime":1683423156968,"results":"43","hashOfConfig":"27"},{"size":6555,"mtime":1683406005582,"results":"44","hashOfConfig":"27"},{"size":968,"mtime":1683423307663,"results":"45","hashOfConfig":"27"},{"size":499,"mtime":1683317541205,"results":"46","hashOfConfig":"27"},{"size":794,"mtime":1683401186678,"results":"47","hashOfConfig":"27"},{"size":1493,"mtime":1683317541205,"results":"48","hashOfConfig":"27"},{"size":40,"mtime":1683422616941,"results":"49","hashOfConfig":"27"},{"size":3816,"mtime":1683424110914,"results":"50","hashOfConfig":"27"},{"size":39,"mtime":1683423554465,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1tets1p",{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/index.js",[],["110","111"],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/App.js",["112","113","114","115"],"import React, { useState } from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\n\nimport Register from \"./pages/Register\";\nimport CreateRecipe from \"./pages/Create\";\n\n// import Register from \"./pages/Register\";\nimport Recipes from \"./pages/Recipes\";\nimport Favorites from \"./pages/Favorites\";\nimport Random from \"./pages/Random\";\nimport MyRecipes from \"./pages/My Recipes\";\n\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport SearchBar from \"./pages/SearchBanner\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"auth_token\");\n  return {\n    headers: {\n      ...headers,\n      Authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  const [pageState, setPageState] = useState({\n    recipes: true,\n    random: false,\n    login: false,\n    create: false,\n    favorites: false,\n    search: true,\n    myRecipes: false,\n  });\n\n  return (\n    <>\n      <ApolloProvider client={client}>\n        {/* <Router>\n          <div>\n            <Routes>\n              <Route path=\"/\" element={<Home />} />\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/register\" element={<Register />} />\n            </Routes>\n          </div>\n        </Router> */}\n\n        <Home pageState={pageState} setPageState={setPageState} />\n        {pageState.search ? <SearchBar /> : \"\"}\n        {pageState.recipes ? <Recipes /> : \"\"}\n        {pageState.random ? <Random /> : \"\"}\n        {pageState.login ? <Login /> : \"\"}\n        {pageState.create ? <CreateRecipe /> : \"\"}\n        {pageState.favorites ? <Favorites /> : \"\"}\n        {pageState.myRecipes ? <MyRecipes /> : \"\"}\n      </ApolloProvider>\n\n      <CssBaseline />\n    </>\n  );\n}\n\nexport default App;\n","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Recipes/index.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Login/index.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Home/index.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Favorites/index.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Register/index.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Random/index.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/SearchBanner/index.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Create/index.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Login/Login.js",["116"],"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../../utils/mutations\";\nimport Register from \"../Register/Register\"\nimport Grid from '@mui/material/Grid';\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Button from \"@mui/material/Button\";\nimport Stack from \"@mui/material/Stack\";\nimport TextField from \"@mui/material/TextField\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport Alert from \"@mui/material/Alert\";\n\n\n\nimport Auth from \"../../utils/auth.js\";\n\nfunction Login() {\n\n\n  const [open, setOpen] = useState(true);\n  \n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const [formState, setFormState] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  \n  \n  const [Login, { error, data }] = useMutation(LOGIN_USER);\n  \n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n      if (form.checkValidity() === false) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n    try {\n      const { data } = await Login({\n        variables: { ...formState },\n      });\n\n      console.log(data);\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setFormState({\n      email: '',\n      password: '',\n    });\n\n  };\n  return (\n    <>\n      <Grid container justifyContent=\"center\">\n        <Grid container justifyContent=\"center\">\n          <h1>Login Here</h1>\n        </Grid>\n        <Grid item justifyContent=\"center\" xs={10} md={6} lg={4}>\n          <form noValidate validated={validated} onSubmit={handleFormSubmit}>\n            <Stack sx={{ width: \"100%\" }} spacing={2}>\n              <Snackbar\n                open={showAlert}\n                sx={{ height: \"100%\" }}\n                anchorOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"center\",\n                }}\n              >\n                <Alert\n                  dismissible\n                  severity=\"error\"\n                  onClose={() => setShowAlert(false)}\n                >\n                  Please check your login inputs!\n                </Alert>\n              </Snackbar>\n            </Stack>\n            <InputLabel>Email</InputLabel>\n            <TextField\n              type=\"email\"\n              name=\"email\"\n              value={formState.email}\n              fullWidth\n              onChange={handleInputChange}\n              required\n            />\n            <InputLabel>Password</InputLabel>\n            <TextField\n              type=\"password\"\n              name=\"password\"\n              value={formState.password}\n              fullWidth\n              onChange={handleInputChange}\n              required\n            />\n            {/* <button type=\"submit\">Login User</button> */}\n            <Stack\n              justifyContent=\"center\"\n              direction=\"row\"\n              spacing={2}\n              padding={2}\n            >\n              <Button\n                variant=\"contained\"\n                color=\"success\"\n                type=\"submit\"\n                onClick={handleClick}\n              >\n                Login User\n              </Button>\n            </Stack>\n          </form>\n        </Grid>\n\n        <Register />\n      </Grid>\n    </>\n  );\n}\n\nexport default Login;\n","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Recipes/Recipes.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Favorites/Favorites.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Register/Register.js",["117"],"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { REGISTER_USER } from \"../../utils/mutations\";\nimport Grid from \"@mui/material/Grid\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Button from \"@mui/material/Button\";\nimport Stack from \"@mui/material/Stack\";\nimport TextField from \"@mui/material/TextField\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport Alert from \"@mui/material/Alert\";\n\nimport Auth from \"../../utils/auth.js\";\n\nfunction Register() {\n  const [formState, setFormState] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const [open, setOpen] = useState(true);\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [register, { error, data }] = useMutation(REGISTER_USER);\n\n   useEffect(() => {\n     if (error) {\n       setShowAlert(true);\n     } else {\n       setShowAlert(false);\n     }\n   }, [error]);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await register({\n        variables: { ...formState },\n      });\n\n      console.log(data);\n      Auth.login(data.register.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setFormState({\n      name: '',\n      email: '',\n      password: '',\n    });\n\n  };\n  return (\n    <>\n      <Grid container justifyContent=\"center\">\n        <Grid container justifyContent=\"center\">\n          <h1>Register Here</h1>\n        </Grid>\n        <Grid item justifyContent=\"center\" xs={10} md={6} lg={4}>\n          <form noValidate validated={validated} onSubmit={handleFormSubmit}>\n            <Stack sx={{ width: \"100%\" }} spacing={2}>\n              <Snackbar\n                open={showAlert}\n                sx={{ height: \"100%\" }}\n                anchorOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"center\",\n                }}\n              >\n                <Alert\n                  dismissible\n                  severity=\"error\"\n                  onClose={() => setShowAlert(false)}\n                >\n                  Something went wrong. Check your inputs!\n                </Alert>\n              </Snackbar>\n            </Stack>\n            <InputLabel>Name</InputLabel>\n            <TextField\n              type=\"text\"\n              name=\"name\"\n              value={formState.name}\n              fullWidth\n              onChange={handleInputChange}\n              required\n            />\n            <InputLabel>Email</InputLabel>\n            <TextField\n              type=\"email\"\n              name=\"email\"\n              value={formState.email}\n              fullWidth\n              onChange={handleInputChange}\n              required\n            />\n            <InputLabel>Password</InputLabel>\n            <TextField\n              type=\"password\"\n              name=\"password\"\n              value={formState.password}\n              fullWidth\n              onChange={handleInputChange}\n              required\n            />\n            {/* <button type=\"submit\">Register User</button> */}\n\n            <Stack\n              justifyContent=\"center\"\n              direction=\"row\"\n              spacing={2}\n              padding={2}\n            >\n              <Button\n                variant=\"contained\"\n                color=\"success\"\n                type=\"submit\"\n                onClick={handleClick}\n              >\n                Register User\n              </Button>\n            </Stack>\n          </form>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default Register;\n","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Home/Home.js",["118","119","120","121","122","123"],"import * as React from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport Menu from \"@mui/material/Menu\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport Container from \"@mui/material/Container\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport MenuBookIcon from \"@mui/icons-material/MenuBook\";\nimport AllInclusiveTwoToneIcon from \"@mui/icons-material/AllInclusiveTwoTone\";\nimport FavoriteTwoToneIcon from \"@mui/icons-material/FavoriteTwoTone\";\nimport PermIdentityTwoToneIcon from \"@mui/icons-material/PermIdentityTwoTone\";\n// import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport FastfoodTwoToneIcon from \"@mui/icons-material/FastfoodTwoTone\";\nimport DriveFileRenameOutlineTwoToneIcon from \"@mui/icons-material/DriveFileRenameOutlineTwoTone\";\nimport LogoutTwoToneIcon from \"@mui/icons-material/LogoutTwoTone\";\nimport MenuBookTwoToneIcon from \"@mui/icons-material/MenuBookTwoTone\";\nimport Person2TwoToneIcon from \"@mui/icons-material/Person2TwoTone\";\nimport Auth from \"../../utils/auth.js\";\n\n// const pages = [\"Recipes\", \"Random\", \"Login/Register\"];\n// const settings = [\"Profile\", \"Create Recipe\", \"Favorites\", \"Logout\"];\n\nfunction Home({ pageState, setPageState }) {\n  // const authStatus = localStorage.getItem(\"auth\")\n\n  // const [loginStatus, setLoginStatus] = React.useState(false)\n  const [anchorElNav, setAnchorElNav] = React.useState(null);\n  const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n  // const [showButton, setShowButton] = useState(false);\n\n  // useEffect(()=> {\n  //   checkStorage();\n  //   return () => {}\n  // }, [loginStatus])\n\n  // const checkStorage= () => {\n  //   if (localStorage.getItem(\"loginStatus\")) {\n  //     setLoginStatus(true)\n  //   } else {\n  //     setLoginStatus(false)\n  //   }\n  // }\n\n  // const logOut = () => {\n  //   localStorage.removeItem(\"loginStatus\");\n  //   setLoginStatus(false)\n  // }\n\n  const handleOpenNavMenu = (event) => {\n    setAnchorElNav(event.currentTarget);\n  };\n  const handleOpenUserMenu = (event) => {\n    setAnchorElUser(event.currentTarget);\n  };\n\n  const handleCloseNavMenu = () => {\n    setAnchorElNav(null);\n  };\n\n  const handleCloseUserMenu = () => {\n    setAnchorElUser(null);\n  };\n\n  // setLoginStatus(localStorage.getItem(\"loginStatus\"));\n\n  const handleOpenRecipes = () => {\n    setPageState({\n      ...pageState,\n      recipes: true,\n      random: false,\n      login: false,\n      create: false,\n      favorites: false,\n      search: true,\n      myRecipes: false,\n    });\n    // setLoginStatus(true);\n  };\n\n  const handleOpenRandom = () => {\n    setPageState({\n      ...pageState,\n      recipes: false,\n      random: true,\n      login: false,\n      create: false,\n      favorites: false,\n      search: true,\n      myRecipes: false,\n    });\n  };\n  const handleOpenLogin = () => {\n    setPageState({\n      ...pageState,\n      recipes: false,\n      random: false,\n      login: true,\n      create: false,\n      favorites: false,\n      search: false,\n      myRecipes: false,\n    });\n    // localStorage.setItem(\"loginStatus\", true)\n  };\n  const handleOpenFavorites = () => {\n    setPageState({\n      ...pageState,\n      recipes: false,\n      random: false,\n      login: false,\n      favorites: true,\n      create: false,\n      search: true,\n      myRecipes: false,\n    });\n  };\n  const handleOpenCreateRecipe = () => {\n    setPageState({\n      ...pageState,\n      recipes: false,\n      random: false,\n      login: false,\n      create: true,\n      favorites: false,\n      search: false,\n      myRecipes: false,\n    });\n  };\n  const handleOpenMyRecipes = () => {\n    setPageState({\n      ...pageState,\n      recipes: false,\n      random: false,\n      login: false,\n      create: false,\n      favorites: false,\n      search: false,\n      myRecipes: true,\n    });\n  };\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Container maxWidth=\"xl\">\n          <Toolbar disableGutters>\n            <MenuBookIcon sx={{ display: { xs: \"none\", md: \"flex\" }, mr: 1 }} />\n            <Typography\n              variant=\"h6\"\n              noWrap\n              component=\"a\"\n              href=\"/\"\n              sx={{\n                mr: 2,\n                display: { xs: \"none\", md: \"flex\" },\n                fontFamily: \"monospace\",\n                fontWeight: 700,\n                letterSpacing: \".3rem\",\n                color: \"inherit\",\n                textDecoration: \"none\",\n              }}\n            >\n              Rest Easy Recipes\n            </Typography>\n\n            {/* <Button href=\"/recipes\" variant=\"contained\">\n              Recipes\n            </Button> */}\n\n            <Box sx={{ flexGrow: 1, display: { xs: \"flex\", md: \"none\" } }}>\n              <IconButton\n                size=\"large\"\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleOpenNavMenu}\n                color=\"inherit\"\n              >\n                <MenuIcon />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorElNav}\n                anchorOrigin={{\n                  vertical: \"bottom\",\n                  horizontal: \"left\",\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"left\",\n                }}\n                open={Boolean(anchorElNav)}\n                onClose={handleCloseNavMenu}\n                sx={{\n                  display: { xs: \"block\", md: \"none\" },\n                }}\n              >\n                {/* {pages.map((page) => ( */}\n\n                {/* <MenuItem key={page} onClick={handleCloseNavMenu}>\n                    <Typography textAlign=\"center\">{page}</Typography>\n                  </MenuItem> */}\n                <MenuItem onClick={handleOpenRecipes}>\n                  <FastfoodTwoToneIcon sx={{ marginRight: \"10px\" }} />\n                  <Typography textAlign=\"center\">Recipes</Typography>\n                </MenuItem>\n                {Auth.loggedIn() ? (\n                  <>\n                    <MenuItem onClick={handleOpenRandom}>\n                      <AllInclusiveTwoToneIcon sx={{ marginRight: \"10px\" }} />\n                      <Typography textAlign=\"center\">Random</Typography>\n                    </MenuItem>\n                    <MenuItem onClick={handleOpenCreateRecipe}>\n                      <DriveFileRenameOutlineTwoToneIcon\n                        sx={{ marginRight: \"10px\" }}\n                      />\n                      <Typography textAlign=\"center\">Create Recipe</Typography>\n                    </MenuItem>\n                    <MenuItem onClick={handleOpenFavorites}>\n                      <FavoriteTwoToneIcon sx={{ marginRight: \"10px\" }} />\n                      <Typography textAlign=\"center\">Favorites</Typography>\n                    </MenuItem>\n                    <MenuItem onClick={Auth.logout}>\n                      <LogoutTwoToneIcon sx={{ marginRight: \"10px\" }} />\n                      <Typography textAlign=\"center\">Log Out</Typography>\n                    </MenuItem>\n                  </>\n                ) : (\n                  <MenuItem onClick={handleOpenLogin}>\n                    <PermIdentityTwoToneIcon sx={{ marginRight: \"10px\" }} />\n                    <Typography textAlign=\"center\">Login/Register</Typography>\n                  </MenuItem>\n                )}\n\n                {/* ))} */}\n              </Menu>\n            </Box>\n            <MenuBookIcon sx={{ display: { xs: \"flex\", md: \"none\" }, mr: 1 }} />\n            <Typography\n              variant=\"h5\"\n              noWrap\n              component=\"a\"\n              href=\"\"\n              sx={{\n                mr: 2,\n                display: { xs: \"flex\", md: \"none\" },\n                flexGrow: 1,\n                fontFamily: \"monospace\",\n                fontWeight: 700,\n                letterSpacing: \".3rem\",\n                color: \"inherit\",\n                textDecoration: \"none\",\n              }}\n            >\n              Rest Easy Recipes\n            </Typography>\n            <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" } }}>\n              {/* {pages.map((page) => (\n                <Button\n                  key={page}\n                  onClick={handleCloseNavMenu}\n                  sx={{ my: 2, color: \"white\", display: \"block\" }}\n                >\n                  {page}\n                </Button> */}\n\n              <Button\n                onClick={handleOpenRecipes}\n                sx={{ my: 2, color: \"white\", display: \"block\" }}\n              >\n                <FastfoodTwoToneIcon sx={{ marginRight: \"5px\" }} />\n                Recipes\n              </Button>\n              {/* {loginStatus ? ( */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Button\n                    onClick={handleOpenRandom}\n                    sx={{ my: 2, color: \"white\", display: \"block\" }}\n                  >\n                    <AllInclusiveTwoToneIcon sx={{ marginRight: \"5px\" }} />\n                    Random\n                  </Button>\n                  <Button\n                    onClick={handleOpenCreateRecipe}\n                    sx={{ my: 2, color: \"white\", display: \"block\" }}\n                  >\n                    <DriveFileRenameOutlineTwoToneIcon\n                      sx={{ marginRight: \"5px\" }}\n                    />\n                    Create Recipe\n                  </Button>\n                  <Button\n                    onClick={handleOpenMyRecipes}\n                    sx={{ my: 2, color: \"white\", display: \"block\" }}\n                  >\n                    <MenuBookTwoToneIcon sx={{ marginRight: \"5px\" }} />\n                    My Recipes\n                  </Button>\n                  <Button\n                    onClick={handleOpenFavorites}\n                    sx={{ my: 2, color: \"white\", display: \"block\" }}\n                  >\n                    <FavoriteTwoToneIcon sx={{ marginRight: \"5px\" }} />\n                    Favorites\n                  </Button>\n\n                  <Button\n                    onClick={Auth.logout}\n                    sx={{ my: 2, color: \"white\", display: \"block\" }}\n                  >\n                    <LogoutTwoToneIcon sx={{ marginRight: \"5px\" }} />\n                    Logout\n                  </Button>\n                </>\n              ) : (\n                <Button\n                  onClick={handleOpenLogin}\n                  sx={{ my: 2, color: \"white\", display: \"block\" }}\n                >\n                  <Person2TwoToneIcon sx={{ marginRight: \"5px\" }} />\n                  Login/Register\n                </Button>\n              )}\n              {/* // <Button */}\n              {/* onClick={handleOpenRandom}\n                sx={{ my: 2, color: \"white\", display: \"block\" }}\n              >\n               Random\n               </Button> */}\n              {/* ) : (<span></span>) */}\n\n              {/* }    */}\n              {/* {!loginStatus ? ( */}\n\n              {/* <Button\n                  onClick={handleOpenLogin}\n                  sx={{ my: 2, color: \"white\", display: \"block\" }}\n                >\n                  Login/Register\n                </Button> */}\n              {/* ) : ( */}\n              {/* <span></span> */}\n              {/* )} */}\n\n              {/* ))} */}\n            </Box>\n\n            {/* <Box sx={{ flexGrow: 0 }}>\n              <Tooltip title=\"Options\">\n                <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}> */}\n            {/* need ${user} and avatar images, avater letter changes with name */}\n            {/* <Avatar alt=\"Remy\" src=\"/static/images/avatar/2.jpg\" />\n                </IconButton>\n              </Tooltip>\n              <Menu\n                sx={{ mt: \"45px\" }}\n                id=\"menu-appbar\"\n                anchorEl={anchorElUser}\n                anchorOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                open={Boolean(anchorElUser)}\n                onClose={handleCloseUserMenu}\n              > */}\n            {/* {settings.map((setting) => ( */}\n            {/* <MenuItem key={setting} onClick={handleCloseUserMenu}>\n                    <Typography textAlign=\"center\">{setting}</Typography>\n                  </MenuItem> */}\n\n            {/* {loginStatus ? ( */}\n            {/* {Auth.loggedIn() ? (\n\n                  <>\n                    <MenuItem onClick={handleOpenCreateRecipe}>\n                      <Typography textAlign=\"center\">Create Recipe</Typography>\n                    </MenuItem>\n                    <MenuItem onClick={handleOpenFavorites}>\n                      <Typography textAlign=\"center\">Favorites</Typography>\n                    </MenuItem>\n                  </>\n                ): (\n\n                    <MenuItem onClick={Auth.logout}>\n                      <Typography textAlign=\"center\">Logout</Typography>\n                    </MenuItem>\n\n                )} */}\n            {/* ) : (\n                  null\n                )} */}\n\n            {/* ))}  */}\n            {/* </Menu>\n            </Box> */}\n          </Toolbar>\n        </Container>\n      </AppBar>\n      {/* <Favorites /> */}\n    </>\n  );\n}\nexport default Home;\n","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Create/CreateRecipe.js",["124","125"],"// export default CreateRecipe;\nimport { useState } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport Stack from \"@mui/material/Stack\";\nimport { useMutation } from \"@apollo/client\";\nimport { CREATE_RECIPE } from \"../../utils/mutations\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const CreateRecipe = () => {\n  const [recipe, setRecipe] = useState({\n    name: \"\",\n    region: \"\",\n    description: \"\",\n    cookTime: 0,\n    ingredients: \"\",\n    instructions: \"\",\n    image: \"\",\n  });\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    if (name === \"cookTime\") {\n      if (value < 0) {\n        setRecipe({ ...recipe, [name]: 0 });\n        return;\n      }\n    }\n    setRecipe({ ...recipe, [name]: value });\n  };\n\n  const handleImageChange = (event) => {\n    setRecipe({ ...recipe, image: event.target.files[0] });\n  };\n\n  const [createRecipe] = useMutation(CREATE_RECIPE);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    console.log(recipe);\n    try {\n      const { data } = await createRecipe({\n        variables: {\n          name: recipe.name,\n          region: recipe.region.toLowerCase(),\n          description: recipe.description,\n          cookTime: parseInt(recipe.cookTime),\n          ingredients: recipe.ingredients.split(\"/\\r\\n/\"),\n          instructions: recipe.instructions.split(\"/\\r\\n/\"),\n          image: recipe.image,\n          //          image: recipe.image,\n        },\n      });\n      console.log(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <>\n      <Grid container justifyContent=\"center\">\n        <Grid container justifyContent=\"center\">\n          <h2>Create A Recipe</h2>\n        </Grid>\n        <Grid item justifyContent=\"center\" xs={10} md={6} lg={4}>\n          <form onSubmit={handleSubmit}>\n            <InputLabel htmlFor=\"name\">Name</InputLabel>\n            <TextField\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              onChange={handleChange}\n              fullWidth\n            />\n\n            <InputLabel htmlFor=\"region\">Region</InputLabel>\n            <TextField\n              type=\"text\"\n              id=\"region\"\n              name=\"region\"\n              onChange={handleChange}\n              fullWidth\n            />\n\n            <InputLabel htmlFor=\"description\">Description</InputLabel>\n            <TextField\n              id=\"description\"\n              name=\"description\"\n              multiline\n              onChange={handleChange}\n              fullWidth\n            />\n\n            <InputLabel htmlFor=\"cookTime\">Cook Time (minutes) </InputLabel>\n            <TextField\n              type=\"number\"\n              id=\"cookTime\"\n              name=\"cookTime\"\n              fullWidth\n              onChange={handleChange}\n            />\n\n            <InputLabel htmlFor=\"ingredients\">Ingredients</InputLabel>\n            <TextField\n              id=\"ingredients\"\n              name=\"ingredients\"\n              onChange={handleChange}\n              fullWidth\n              multiline\n            />\n\n            <InputLabel htmlFor=\"instructions\">Instructions</InputLabel>\n            <TextField\n              id=\"instructions\"\n              name=\"instructions\"\n              onChange={handleChange}\n              fullWidth\n              multiline\n            />\n            <InputLabel htmlFor=\"image\">Image</InputLabel>\n            <TextField\n              id=\"image\"\n              name=\"image\"\n              onChange={handleChange}\n              fullWidth\n              multiline\n            />\n\n            <Stack\n              justifyContent=\"center\"\n              direction=\"row\"\n              spacing={2}\n              padding={2}\n            >\n              <Button\n                variant=\"contained\"\n                type=\"submit\"\n                onClick={(event) => (window.location.href = \"/myrecipes\")}\n              >\n                Submit Recipe\n              </Button>\n            </Stack>\n          </form>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default CreateRecipe;\n","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/Random/Random.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/SearchBanner/SearchBanner.js",["126"],"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Card from \"@mui/material/Card\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardActions from \"@mui/material/CardActions\";\nimport Collapse from \"@mui/material/Collapse\";\nimport Avatar from \"@mui/material/Avatar\";\nimport IconButton, { IconButtonProps } from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport { red } from \"@mui/material/colors\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport StarsRating from \"stars-rating\";\n\nimport Grid from \"@mui/material/Grid\";\nimport HomePhoto from \"../../Images/foodBanner.png\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\nimport { QUERY_RECIPE_BY_REGION } from \"../../utils/queries\";\n\ninterface ExpandMoreProps extends IconButtonProps {\n  expand: boolean;\n}\n\nconst ExpandMore = styled((props: ExpandMoreProps) => {\n  const { expand, ...other } = props;\n  return <IconButton {...other} />;\n})(({ theme, expand }) => ({\n  transform: !expand ? \"rotate(0deg)\" : \"rotate(180deg)\",\n  marginLeft: \"auto\",\n  transition: theme.transitions.create(\"transform\", {\n    duration: theme.transitions.duration.shortest,\n  }),\n}));\n\nfunction SearchBar() {\n  const [expanded, setExpanded] = React.useState(false);\n  // favorites code\n  const [favorites, setFavorites] = useState([]);\n\n  const handleFavoriteClick = (recipeName) => {\n    if (favorites.includes(recipeName)) {\n      setFavorites(favorites.filter((name) => name !== recipeName));\n    } else {\n      setFavorites([...favorites, recipeName]);\n    }\n  };\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  // const onSearch = (searchItem) => {\n  //   console.log(\"search\", searchItem);\n  // };\n\n\n\n  const [fetchRecipes, { data }] = useLazyQuery(QUERY_RECIPE_BY_REGION);\n\n  // console.log(data.name);\n\n\n  return (\n    <>\n      <Grid\n        sx={{\n          backgroundImage: `url(${HomePhoto})`,\n          backgroundPosition: \"center\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundSize: \"cover\",\n          height: 500,\n          width: \"100%\",\n        }}\n      >\n        <Grid container justifyContent={\"center\"} padding={20}>\n          <TextField\n            sx={{ backgroundColor: \"whitesmoke\", width: 600 }}\n            id=\"search\"\n            type=\"search\"\n            value={searchTerm}\n            label=\"Search\"\n            onChange={handleChange}\n            margin=\"dense\"\n          />\n\n          <Grid padding={2}>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                fetchRecipes({ variables: { recipeRegion: searchTerm } });\n              }}\n            >\n              Search\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Grid>\n        <Grid>\n          {data && (\n            <Grid>\n              <Typography marginTop=\"30px\" variant=\"h3\" align=\"center\">\n                {\" \"}\n                Results\n              </Typography>\n              <Card\n                sx={{\n                  maxWidth: 345,\n                  marginRight: 10,\n                  marginLeft: 10,\n                  marginBottom: \"20px\",\n                  marginTop: \"50px\",\n                }}\n                key={data.recipe.name}\n              >\n                <CardHeader\n                  avatar={\n                    <Avatar\n                      sx={{ bgcolor: red[500] }}\n                      aria-label=\"recipe\"\n                    ></Avatar>\n                  }\n                  title={data.recipe.name}\n                />\n                <CardMedia\n                  component=\"img\"\n                  className=\"card-image\"\n                  image={data.recipe.image}\n                  title={data.recipe.name}\n                />\n                <CardContent>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    <h2>Description: </h2>\n                    <p>{data.recipe.description}</p>\n\n                    <StarsRating\n                      count={5}\n                      value={data.recipe.rate}\n                      size={24}\n                      color2={\"#ffd700\"}\n                    />\n                  </Typography>\n                </CardContent>\n\n                <CardActions disableSpacing>\n                  <IconButton\n                    aria-label=\"add to favorites\"\n                    onClick={() => handleFavoriteClick(data.recipe.name)}\n                  >\n                    <FavoriteIcon\n                      color={\n                        favorites.includes(data.recipe.name)\n                          ? \"secondary\"\n                          : \"inherit\"\n                      }\n                    />\n                  </IconButton>\n\n                  <ExpandMore\n                    expand={expanded}\n                    onClick={handleExpandClick}\n                    aria-expanded={expanded}\n                    aria-label=\"show more\"\n                  >\n                    <ExpandMoreIcon />\n                  </ExpandMore>\n                </CardActions>\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                  <CardContent>\n                    <Typography paragraph>\n                      <h3>Directions: </h3>\n                      {data.recipe.instructions}\n                    </Typography>\n                    <Typography paragraph>\n                      <h3>Ingredients: </h3>\n                      {data.recipe.ingredients}\n                    </Typography>\n                    <Typography paragraph>\n                      <h3>Cook time: </h3>\n                      {data.recipe.cookTime}\n                      <p> minutes</p>\n                    </Typography>\n                    <Typography>\n                      <h3>Region: </h3>\n                      {data.recipe.region}\n                    </Typography>\n                  </CardContent>\n                </Collapse>\n              </Card>\n            </Grid>\n          )}\n          {/* ;{error && <h1>There is no result</h1>} */}\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default SearchBar;\n","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/My Recipes/MyRecipes.js",["127"],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/utils/auth.js",["128"],"import decode from \"jwt-decode\";\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return token ? true : false;\n  }\n\n  getToken() {\n    return localStorage.getItem(\"auth_token\");\n  }\n\n  login(token) {\n    localStorage.setItem(\"auth_token\", token);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    localStorage.removeItem(\"auth_token\");\n    window.location.reload('/');\n  }\n}\n\nexport default new AuthService();\n","/Users/mateusjoo/Desktop/resteasyrecipe/client/src/utils/queries.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/utils/mutations.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/RecipeCard/index.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/RecipeCard/RecipeCard.js",[],"/Users/mateusjoo/Desktop/resteasyrecipe/client/src/pages/My Recipes/index.js",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":9,"column":27,"nodeType":"135","messageId":"136","endLine":9,"endColumn":33},{"ruleId":"133","severity":1,"message":"137","line":9,"column":35,"nodeType":"135","messageId":"136","endLine":9,"endColumn":40},{"ruleId":"133","severity":1,"message":"138","line":9,"column":42,"nodeType":"135","messageId":"136","endLine":9,"endColumn":48},{"ruleId":"133","severity":1,"message":"139","line":14,"column":8,"nodeType":"135","messageId":"136","endLine":14,"endColumn":16},{"ruleId":"133","severity":1,"message":"140","line":35,"column":26,"nodeType":"135","messageId":"136","endLine":35,"endColumn":30},{"ruleId":"133","severity":1,"message":"140","line":30,"column":29,"nodeType":"135","messageId":"136","endLine":30,"endColumn":33},{"ruleId":"133","severity":1,"message":"141","line":10,"column":8,"nodeType":"135","messageId":"136","endLine":10,"endColumn":14},{"ruleId":"133","severity":1,"message":"142","line":12,"column":8,"nodeType":"135","messageId":"136","endLine":12,"endColumn":15},{"ruleId":"133","severity":1,"message":"143","line":19,"column":10,"nodeType":"135","messageId":"136","endLine":19,"endColumn":18},{"ruleId":"133","severity":1,"message":"144","line":35,"column":10,"nodeType":"135","messageId":"136","endLine":35,"endColumn":22},{"ruleId":"133","severity":1,"message":"145","line":60,"column":9,"nodeType":"135","messageId":"136","endLine":60,"endColumn":27},{"ruleId":"133","severity":1,"message":"146","line":68,"column":9,"nodeType":"135","messageId":"136","endLine":68,"endColumn":28},{"ruleId":"133","severity":1,"message":"147","line":10,"column":10,"nodeType":"135","messageId":"136","endLine":10,"endColumn":21},{"ruleId":"133","severity":1,"message":"148","line":34,"column":9,"nodeType":"135","messageId":"136","endLine":34,"endColumn":26},{"ruleId":"133","severity":1,"message":"149","line":22,"column":10,"nodeType":"135","messageId":"136","endLine":22,"endColumn":18},{"ruleId":"133","severity":1,"message":"150","line":4,"column":10,"nodeType":"135","messageId":"136","endLine":4,"endColumn":13},{"ruleId":"151","severity":1,"message":"152","line":28,"column":1,"nodeType":"153","endLine":28,"endColumn":34},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Routes' is defined but never used.","'Register' is defined but never used.","'data' is assigned a value but never used.","'Avatar' is defined but never used.","'Tooltip' is defined but never used.","'useState' is defined but never used.","'anchorElUser' is assigned a value but never used.","'handleOpenUserMenu' is assigned a value but never used.","'handleCloseUserMenu' is assigned a value but never used.","'useNavigate' is defined but never used.","'handleImageChange' is assigned a value but never used.","'useQuery' is defined but never used.","'red' is defined but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]